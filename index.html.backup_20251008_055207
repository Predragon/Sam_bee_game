<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <meta name="theme-color" content="#87CEEB">
  <link rel="manifest" href="manifest.json">
  <title>Samantha's Bee Adventure üêù</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    
    body {
      overflow: hidden;
      background: linear-gradient(to bottom, #87CEEB 0%, #98D8C8 100%);
      font-family: 'Comic Sans MS', cursive, sans-serif;
      touch-action: none;
    }

    #gameContainer {
      position: relative;
      width: 100vw;
      height: 100vh;
    }

    canvas {
      display: block;
      position: absolute;
      top: 0;
      left: 0;
    }

    #header {
      position: absolute;
      top: 10px;
      width: 100%;
      text-align: center;
      z-index: 10;
      pointer-events: none;
    }

    h1 {
      font-size: clamp(20px, 5vw, 32px);
      color: #FFD700;
      text-shadow: 3px 3px 0 #FF6347, -1px -1px 0 #fff;
      margin-bottom: 8px;
      animation: bounce 2s infinite;
    }

    @keyframes bounce {
      0%, 100% { transform: translateY(0); }
      50% { transform: translateY(-5px); }
    }

    #scoreBoard {
      background: rgba(255, 255, 255, 0.9);
      padding: 10px 20px;
      border-radius: 20px;
      display: inline-block;
      box-shadow: 0 4px 10px rgba(0,0,0,0.3);
    }

    #score {
      font-size: clamp(16px, 4vw, 24px);
      color: #FF6347;
      font-weight: bold;
    }

    #funFact {
      position: absolute;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(255, 255, 255, 0.95);
      padding: 15px 25px;
      border-radius: 15px;
      max-width: 90%;
      text-align: center;
      font-size: clamp(14px, 3.5vw, 18px);
      color: #333;
      box-shadow: 0 4px 15px rgba(0,0,0,0.2);
      z-index: 10;
      opacity: 0;
      transition: opacity 0.5s;
    }

    #funFact.show {
      opacity: 1;
    }

    #levelComplete {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%) scale(0);
      background: linear-gradient(135deg, #FFD700, #FFA500);
      padding: 30px 50px;
      border-radius: 25px;
      font-size: clamp(24px, 6vw, 40px);
      color: white;
      text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
      box-shadow: 0 10px 30px rgba(0,0,0,0.4);
      z-index: 20;
      transition: transform 0.5s;
    }

    #levelComplete.show {
      transform: translate(-50%, -50%) scale(1);
      animation: celebrate 0.6s ease-in-out;
    }

    @keyframes celebrate {
      0%, 100% { transform: translate(-50%, -50%) scale(1) rotate(0deg); }
      25% { transform: translate(-50%, -50%) scale(1.1) rotate(-5deg); }
      75% { transform: translate(-50%, -50%) scale(1.1) rotate(5deg); }
    }

    #instructions {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(255, 255, 255, 0.95);
      padding: 30px;
      border-radius: 20px;
      text-align: center;
      z-index: 30;
      box-shadow: 0 10px 40px rgba(0,0,0,0.3);
    }

    #instructions h2 {
      color: #FF6347;
      margin-bottom: 15px;
      font-size: clamp(20px, 5vw, 28px);
    }

    #instructions p {
      font-size: clamp(16px, 4vw, 20px);
      margin: 10px 0;
      color: #333;
    }

    #startBtn {
      margin-top: 20px;
      padding: 15px 40px;
      font-size: clamp(18px, 4.5vw, 24px);
      background: linear-gradient(135deg, #FFD700, #FFA500);
      border: none;
      border-radius: 15px;
      color: white;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 5px 15px rgba(0,0,0,0.3);
      font-family: 'Comic Sans MS', cursive;
    }

    #startBtn:active {
      transform: scale(0.95);
    }

    .particle {
      position: absolute;
      pointer-events: none;
      z-index: 5;
    }
  </style>
</head>
<body>
  <div id="gameContainer">
    <canvas id="gameCanvas"></canvas>
    
    <div id="header">
      <h1>üêù Samantha's Bee Adventure üêù</h1>
      <div id="scoreBoard">
        <div id="score">Level 1 | Flowers: 0/5</div>
      </div>
    </div>

    <div id="funFact"></div>
    <div id="levelComplete">Level Complete! üéâ</div>

    <div id="instructions">
      <h2>üå∏ How to Play üå∏</h2>
      <p>üëÜ Tap the screen to move your bee</p>
      <p>üåº Collect flowers to make honey</p>
      <p>üß† Learn fun bee facts!</p>
      <button id="startBtn">Start Adventure! üöÄ</button>
    </div>
  </div>

  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const scoreEl = document.getElementById('score');
    const levelPopup = document.getElementById('levelComplete');
    const funFactEl = document.getElementById('funFact');
    const instructions = document.getElementById('instructions');
    const startBtn = document.getElementById('startBtn');

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Educational bee facts
    const beeFacts = [
      "üêù Bees dance to tell other bees where flowers are!",
      "üçØ One bee makes 1/12 teaspoon of honey in her lifetime!",
      "üå∏ Bees visit up to 5,000 flowers in one day!",
      "üëÅÔ∏è Bees have 5 eyes - 2 big ones and 3 small ones!",
      "üé® Bees can see colors, but not red!",
      "üè† A beehive can have up to 50,000 bees!",
      "‚úàÔ∏è Bees fly at 15 miles per hour!",
      "üí™ Bees carry pollen in baskets on their legs!",
      "üåç Bees help flowers grow all around the world!",
      "üëë The Queen Bee can live for 5 years!"
    ];

    let score = 0;
    let level = 1;
    let targetScore = 5;
    let gameStarted = false;
    let factIndex = 0;
    let beeAngle = 0;
    const flowers = [];
    const clouds = [];
    const particles = [];

    const bee = { 
      x: canvas.width / 2, 
      y: canvas.height / 2, 
      size: 60,
      targetX: canvas.width / 2,
      targetY: canvas.height / 2
    };

    // Colors for flowers
    const flowerColors = [
      ['#FF1493', '#FFB6C1'], // Pink
      ['#FF6347', '#FFA07A'], // Red
      ['#9370DB', '#DDA0DD'], // Purple
      ['#FFD700', '#FFFF00'], // Yellow
      ['#FF69B4', '#FFC0CB']  // Hot pink
    ];

    // Generate clouds
    for (let i = 0; i < 5; i++) {
      clouds.push({
        x: Math.random() * canvas.width,
        y: Math.random() * (canvas.height * 0.3),
        size: 60 + Math.random() * 40,
        speed: 0.2 + Math.random() * 0.3
      });
    }

    // Start button
    startBtn.addEventListener('click', () => {
      instructions.style.display = 'none';
      gameStarted = true;
      spawnFlowers();
      showFunFact();
      gameLoop();
    });

    // Spawn flowers based on level
    function spawnFlowers() {
      flowers.length = 0;
      const flowerCount = Math.min(3 + level, 8);
      for (let i = 0; i < flowerCount; i++) {
        setTimeout(() => {
          flowers.push({
            x: Math.random() * (canvas.width - 100) + 50,
            y: Math.random() * (canvas.height - 200) + 100,
            size: 50 + Math.random() * 20,
            color: flowerColors[Math.floor(Math.random() * flowerColors.length)],
            rotation: Math.random() * Math.PI * 2,
            wobble: Math.random() * Math.PI * 2
          });
        }, i * 300);
      }
    }

    // Show fun fact
    function showFunFact() {
      funFactEl.textContent = beeFacts[factIndex % beeFacts.length];
      funFactEl.classList.add('show');
      factIndex++;
      setTimeout(() => {
        funFactEl.classList.remove('show');
      }, 4000);
    }

    // Draw cloud
    function drawCloud(x, y, size) {
      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
      ctx.beginPath();
      ctx.arc(x, y, size * 0.5, 0, Math.PI * 2);
      ctx.arc(x + size * 0.4, y, size * 0.4, 0, Math.PI * 2);
      ctx.arc(x - size * 0.4, y, size * 0.4, 0, Math.PI * 2);
      ctx.arc(x, y - size * 0.3, size * 0.4, 0, Math.PI * 2);
      ctx.fill();
    }

    // Draw flower
    function drawFlower(flower) {
      const { x, y, size, color, rotation, wobble } = flower;
      
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(rotation + Math.sin(wobble) * 0.1);
      
      // Stem
      ctx.strokeStyle = '#228B22';
      ctx.lineWidth = 4;
      ctx.beginPath();
      ctx.moveTo(0, 10);
      ctx.lineTo(0, size * 0.8);
      ctx.stroke();
      
      // Petals
      for (let i = 0; i < 6; i++) {
        ctx.save();
        ctx.rotate((Math.PI * 2 / 6) * i);
        ctx.fillStyle = color[0];
        ctx.beginPath();
        ctx.ellipse(0, -size * 0.3, size * 0.25, size * 0.4, 0, 0, Math.PI * 2);
        ctx.fill();
        ctx.restore();
      }
      
      // Center
      ctx.fillStyle = color[1];
      ctx.beginPath();
      ctx.arc(0, 0, size * 0.2, 0, Math.PI * 2);
      ctx.fill();
      
      ctx.restore();
      
      flower.wobble += 0.02;
    }

    // Draw bee
    function drawBee() {
      const { x, y, size } = bee;
      
      ctx.save();
      ctx.translate(x, y);
      ctx.rotate(beeAngle);
      
      // Wings
      ctx.fillStyle = 'rgba(200, 230, 255, 0.7)';
      ctx.beginPath();
      ctx.ellipse(-size * 0.2, -size * 0.3, size * 0.4, size * 0.25, -0.3, 0, Math.PI * 2);
      ctx.ellipse(-size * 0.2, size * 0.3, size * 0.4, size * 0.25, 0.3, 0, Math.PI * 2);
      ctx.fill();
      
      // Body
      ctx.fillStyle = '#FFD700';
      ctx.beginPath();
      ctx.ellipse(0, 0, size * 0.5, size * 0.35, 0, 0, Math.PI * 2);
      ctx.fill();
      
      // Stripes
      ctx.strokeStyle = '#000';
      ctx.lineWidth = 3;
      for (let i = -1; i <= 1; i++) {
        ctx.beginPath();
        ctx.moveTo(size * 0.2 * i, -size * 0.35);
        ctx.lineTo(size * 0.2 * i, size * 0.35);
        ctx.stroke();
      }
      
      // Face
      ctx.fillStyle = '#000';
      ctx.beginPath();
      ctx.arc(size * 0.35, -size * 0.1, size * 0.08, 0, Math.PI * 2);
      ctx.arc(size * 0.35, size * 0.1, size * 0.08, 0, Math.PI * 2);
      ctx.fill();
      
      // Smile
      ctx.strokeStyle = '#000';
      ctx.lineWidth = 2;
      ctx.beginPath();
      ctx.arc(size * 0.45, 0, size * 0.15, 0.2, Math.PI - 0.2);
      ctx.stroke();
      
      ctx.restore();
    }

    // Create particles
    function createParticles(x, y) {
      for (let i = 0; i < 10; i++) {
        particles.push({
          x: x,
          y: y,
          vx: (Math.random() - 0.5) * 5,
          vy: (Math.random() - 0.5) * 5,
          life: 1,
          size: 5 + Math.random() * 5,
          color: `hsl(${Math.random() * 60 + 30}, 100%, 50%)`
        });
      }
    }

    // Update particles
    function updateParticles() {
      for (let i = particles.length - 1; i >= 0; i--) {
        const p = particles[i];
        p.x += p.vx;
        p.y += p.vy;
        p.life -= 0.02;
        
        ctx.globalAlpha = p.life;
        ctx.fillStyle = p.color;
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
        ctx.fill();
        ctx.globalAlpha = 1;
        
        if (p.life <= 0) particles.splice(i, 1);
      }
    }

    // Check collision
    function checkCollision() {
      for (let i = flowers.length - 1; i >= 0; i--) {
        const f = flowers[i];
        const dx = bee.x - f.x;
        const dy = bee.y - f.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        
        if (distance < (bee.size + f.size) / 2) {
          flowers.splice(i, 1);
          score++;
          createParticles(f.x, f.y);
          
          scoreEl.textContent = `Level ${level} | Flowers: ${score}/${targetScore}`;
          
          if (score >= targetScore) {
            setTimeout(nextLevel, 500);
          }
        }
      }
    }

    // Next level
    function nextLevel() {
      levelPopup.classList.add('show');
      setTimeout(() => {
        level++;
        score = 0;
        targetScore = level * 5;
        levelPopup.classList.remove('show');
        spawnFlowers();
        showFunFact();
        scoreEl.textContent = `Level ${level} | Flowers: ${score}/${targetScore}`;
      }, 2000);
    }

    // Touch control
    canvas.addEventListener('touchstart', handleTouch);
    canvas.addEventListener('touchmove', handleTouch);
    canvas.addEventListener('click', handleTouch);

    function handleTouch(e) {
      if (!gameStarted) return;
      e.preventDefault();
      
      const touch = e.touches ? e.touches[0] : e;
      bee.targetX = touch.clientX;
      bee.targetY = touch.clientY;
    }

    // Game loop
    function gameLoop() {
      if (!gameStarted) return;
      
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      // Draw clouds
      clouds.forEach(cloud => {
        cloud.x += cloud.speed;
        if (cloud.x > canvas.width + cloud.size) cloud.x = -cloud.size;
        drawCloud(cloud.x, cloud.y, cloud.size);
      });
      
      // Update bee position smoothly
      bee.x += (bee.targetX - bee.x) * 0.1;
      bee.y += (bee.targetY - bee.y) * 0.1;
      
      // Update bee angle
      const dx = bee.targetX - bee.x;
      const dy = bee.targetY - bee.y;
      beeAngle = Math.atan2(dy, dx);
      
      // Draw flowers
      flowers.forEach(drawFlower);
      
      // Draw bee
      drawBee();
      
      // Update particles
      updateParticles();
      
      // Check collisions
      checkCollision();
      
      requestAnimationFrame(gameLoop);
    }

    // Handle resize
    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    // Register service worker for PWA
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('sw.js').catch(() => {
        console.log('Service worker registration failed');
      });
    }
  </script>
</body>
</html>